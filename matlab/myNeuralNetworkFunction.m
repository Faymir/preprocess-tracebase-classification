function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 11-Jun-2019 20:15:02.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx7 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx3 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.002112;-0.010306;-0.002009;-2e-06;-0.054476;-0.000548;2.453789];
x1_step1.gain = [97.2242477273832;23.2701548628806;145.581598485951;125000;3.70597532932223;180.034206499235;0.0225453545178653];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.3026286302188077038;-1.7431873100996508885;1.5870205533193697534;-0.53458954630327004676;-0.93878063615754214766;-0.93352579425732040708;0.27474851890039209135;0.071520151778554114097;0.55568639069299807787;0.28369582022348105443;1.0917952468990650416;1.1065073295446772317;1.0707944480130109355;2.4238796383914897881;2.8948812500423670713];
IW1_1 = [-0.90714144482012459836 -1.01299999435714283 -0.5548789152765106758 0.37540289669725407373 0.67199891878846540472 -0.10733043243523242294 -0.46648611926333227728;0.87099964541529728557 0.74729130773992236136 -0.82711122617566146253 -0.494913998558733359 0.98273994222072635907 0.92161711985201366648 0.47549355113688029917;-0.064974095222853481268 -0.19610700083279583583 -0.021331957663271946396 0.37116603201699871484 1.5737558363392145644 1.0975134509402286742 1.6747177010941873831;0.48956182742518616902 -1.4634867329525806934 0.80845075682740918932 -0.79745340533656494664 -0.26763980994184727313 -0.82958651629779867065 -1.2400903319508047584;-0.44450138538412553579 -0.013044314971783313103 -1.9878108716186217997 -1.3714307273758021832 -0.88606340017005957854 0.37283806027282195839 -0.96207826819658148754;1.1799515846123265206 -2.1249369475638770766 1.7165810681395550219 -0.76828454948170288308 0.4727951672928187854 -0.056013952094130847748 -1.4536956908502236541;-0.92968274462090161325 -1.1161684590172620268 0.85742593569495451078 0.36088975385732646739 -0.8926780272687201423 0.43543771901983902017 -0.74935885450093642213;0.089033749331131672999 0.33693209102706234148 1.2960728161215395726 1.6834062819641253395 -0.7979972036895754961 0.74626359884329207528 -0.56729824620221036557;0.54057217619782305107 -0.78194357339143683028 1.3361975759980868617 1.0576478592753395525 -0.89189592547393947708 0.38557910142690077215 1.0225990815028969116;1.2611745148674047279 0.10206424329637531212 -0.25041106190716760915 1.2306487675752131317 -0.84424239123368927107 -0.56908803226280912924 -0.29518693486676289561;0.10903057612870199755 -0.23761935998500463563 -1.0387381402141266928 -0.92930739216121782675 2.6952508083805977179 1.3058007203052268697 0.027792317191482496935;0.97541240671724060984 -0.56338405664151081087 -0.024602972294784784119 0.11877777028899329237 0.8571552557457798871 -1.2030888963337962316 -1.6052056298835550852;-0.015586636594997673594 -0.35290184638140287277 -1.2152189091434379975 -2.0011712636225564843 0.58040543393124077731 0.13105572527947093042 1.3503384624284586746;0.31201036309318364026 -0.57483960014288315588 2.9138410381159607354 1.0637596658968888619 0.096937521245871696718 0.56213003384029280873 -2.0624420818882933659;-0.20313472272501065241 -1.4027055710511260322 1.6426239913979974183 0.10202503859139364084 3.2610192048216943839 0.6710760548096523781 -0.45686478523236717653];

% Layer 2
b2 = [0.92699146776732144204;0.29729070153997266823;0.17807510745130791796];
LW2_1 = [0.6741510885429992106 -1.1360442864246946826 -1.5778938536053479513 1.3187515795290949416 -0.73953531496564584025 -2.2728477800696569311 0.99246304379604055601 0.87158942763390967468 0.96508161022002048046 0.65524646662380747753 0.9523244585749697233 1.209223323880809442 -1.1823102901712920776 -2.8920167038580850694 -1.6823518862231927606;0.0031387270030159876433 -0.063022005507054265627 0.32306244921661447789 -0.024707492623563236805 0.79439685515539104621 1.5897500030738551668 -0.065625817352846282926 -1.124969078404383982 0.43727056474746467396 0.85422633431615735411 -1.9078700241270452054 -1.089007505563628575 0.62071116207220533578 1.2041549105530253705 -2.2133828470846137471;-0.87366113586114713119 0.089402071139347491502 1.9526543927292299152 0.3868031686476051112 -0.22042731697301412574 1.54052374633253919 0.45815235841235268932 -1.0168413212608173879 -0.99255195277279129051 -0.75077031951462824821 1.999737062476214966 -0.31902238719295133995 1.1596716113431966289 2.2230563842310302469 3.6093645841657200357];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denov   minator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
